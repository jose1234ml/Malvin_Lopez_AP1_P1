@page "/Aportes/Crear"
@inject RegistroService RegistroService
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

<PageTitle>Crear Aporte</PageTitle>

<EditForm Model="NuevoAporte" OnValidSubmit="GuardarAporte" @key="NuevoAporte">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container card shadow-lg mt-4 p-0">
        <header class="bg-primary text-white py-4 px-4 border-bottom d-flex justify-content-center align-items-center">
            <h4 class="m-0">Crear Nuevo Aporte</h4>
        </header>

        <div class="card-body">

            <div class="mb-3">
                <label class="form-label fw-bold">Nombre</label>
                <InputText class="form-control" @bind-Value="NuevoAporte.Nombre" required />
                <ValidationMessage For="(() => NuevoAporte.Nombre)" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Fecha</label>
                <InputDate class="form-control" @bind-Value="NuevoAporte.Fecha" required />
                <ValidationMessage For="(() => NuevoAporte.Fecha)" />
            </div>

            <div class="mb-3">
                <label class="form-label fw-bold">Dinero Aportado</label>
                <InputNumber class="form-control" @bind-Value="NuevoAporte.DineroAportes" required />
                <ValidationMessage For="(() => NuevoAporte.DineroAportes)" />
            </div>

        </div>

        <div class="card-footer text-center">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-warning" @onclick="LimpiarFormulario">
                    <i class="bi bi-arrow-clockwise"></i> Limpiar
                </button>
                <button type="submit" class="btn btn-outline-primary">
                    <i class="bi bi-check-circle"></i> Guardar
                </button>
                <a href="/Aportes/Index" class="btn btn-outline-dark">
                    <i class="bi bi-x-circle"></i> Cancelar
                </a>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private RegistroAportes NuevoAporte { get; set; } = new() { Fecha = DateTime.Today };

    private async Task GuardarAporte()
    {
        var validationContext = new ValidationContext(NuevoAporte);
        var validationResults = new List<ValidationResult>();

        bool isValid = Validator.TryValidateObject(NuevoAporte, validationContext, validationResults, true);

        if (!isValid)
        {
            ToastService.ShowError("Hay errores de validación en el formulario.");
            return;
        }

        await RegistroService.CrearRegistroAsync(NuevoAporte);
        ToastService.ShowSuccess("Aporte creado correctamente");
        NavigationManager.NavigateTo("/Aportes/Index");
    }

    private void LimpiarFormulario()
    {
        NuevoAporte = new RegistroAportes { Fecha = DateTime.Today };
    }
}